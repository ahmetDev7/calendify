// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using calendify.Data;

#nullable disable

namespace calendify_app.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241001111125_update_event_attendance_columns")]
    partial class update_event_attendance_columns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("calendify_app.Models.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("calendify_app.Models.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("calendify_app.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AdminApproval")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Event");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25c662f0-4a27-4511-9604-fff06fb7101a"),
                            AdminApproval = true,
                            Date = new DateTime(2024, 10, 1, 21, 0, 0, 0, DateTimeKind.Utc),
                            Description = "baba",
                            EndTime = new DateTime(2024, 9, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Location = "Rotterdam",
                            StartTime = new DateTime(2024, 9, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Dinner op kantoor"
                        },
                        new
                        {
                            Id = new Guid("b0b0af25-4fcf-466f-97da-c27261afbb29"),
                            AdminApproval = true,
                            Date = new DateTime(2024, 10, 5, 13, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Een interactieve sessie over het verbeteren van productiviteit op de werkvloer.",
                            EndTime = new DateTime(2024, 10, 5, 15, 0, 0, 0, DateTimeKind.Utc),
                            Location = "Amsterdam",
                            StartTime = new DateTime(2024, 10, 5, 13, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Workshop Productiviteit"
                        },
                        new
                        {
                            Id = new Guid("34b8ada2-b7f4-4ab0-b294-ca8bc36a23d6"),
                            AdminApproval = true,
                            Date = new DateTime(2024, 10, 10, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Een dag vol activiteiten om de samenwerking tussen teams te verbeteren.",
                            EndTime = new DateTime(2024, 10, 10, 17, 0, 0, 0, DateTimeKind.Utc),
                            Location = "Den Haag",
                            StartTime = new DateTime(2024, 10, 10, 9, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Teambuilding Dag"
                        },
                        new
                        {
                            Id = new Guid("3dfa10d9-b6d0-4f54-a304-064764684f29"),
                            AdminApproval = false,
                            Date = new DateTime(2024, 10, 12, 11, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Een creatieve sessie om nieuwe ideeën en innovaties te bedenken voor het bedrijf.",
                            EndTime = new DateTime(2024, 10, 12, 13, 0, 0, 0, DateTimeKind.Utc),
                            Location = "Rotterdam",
                            StartTime = new DateTime(2024, 10, 12, 11, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Brainstorm Sessie"
                        },
                        new
                        {
                            Id = new Guid("200b7a82-7b43-4fc2-b26a-5b503b1ee9d9"),
                            AdminApproval = true,
                            Date = new DateTime(2024, 10, 15, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Een informele lunch waarbij een spreker zijn expertise deelt over een vakgebied.",
                            EndTime = new DateTime(2024, 10, 15, 13, 0, 0, 0, DateTimeKind.Utc),
                            Location = "Utrecht",
                            StartTime = new DateTime(2024, 10, 15, 12, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Lunch & Learn"
                        },
                        new
                        {
                            Id = new Guid("ada7b4f5-d0a2-490f-9d0f-acafd4cb9f32"),
                            AdminApproval = true,
                            Date = new DateTime(2024, 10, 20, 14, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Presentatie van het nieuwe project voor een belangrijke klant.",
                            EndTime = new DateTime(2024, 10, 20, 15, 30, 0, 0, DateTimeKind.Utc),
                            Location = "Eindhoven",
                            StartTime = new DateTime(2024, 10, 20, 14, 0, 0, 0, DateTimeKind.Utc),
                            Title = "Presentatie Klantproject"
                        },
                        new
                        {
                            Id = new Guid("4f36dd4f-8109-4d27-915e-191c1deba5a5"),
                            AdminApproval = true,
                            Date = new DateTime(2024, 10, 25, 16, 30, 0, 0, DateTimeKind.Utc),
                            Description = "Vrijdagmiddagborrel om de werkweek af te sluiten met collega's.",
                            EndTime = new DateTime(2024, 10, 25, 18, 30, 0, 0, DateTimeKind.Utc),
                            Location = "Rotterdam",
                            StartTime = new DateTime(2024, 10, 25, 16, 30, 0, 0, DateTimeKind.Utc),
                            Title = "Vrijmibo op kantoor"
                        });
                });

            modelBuilder.Entity("calendify_app.Models.EventAttendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Event_Attendance");
                });

            modelBuilder.Entity("calendify_app.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RecurringDays")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("calendify_app.Models.Attendance", b =>
                {
                    b.HasOne("calendify_app.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("calendify_app.Models.Event", b =>
                {
                    b.HasOne("calendify_app.Models.User", null)
                        .WithMany("Events")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("calendify_app.Models.EventAttendance", b =>
                {
                    b.HasOne("calendify_app.Models.Event", "Event")
                        .WithMany("EventAttendance")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("calendify_app.Models.User", "User")
                        .WithMany("EventAttendance")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("calendify_app.Models.Event", b =>
                {
                    b.Navigation("EventAttendance");
                });

            modelBuilder.Entity("calendify_app.Models.User", b =>
                {
                    b.Navigation("EventAttendance");

                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
